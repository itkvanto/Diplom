import random
from telebot import types, TeleBot
from translation import get_word_example,get_word_translation
from database import create_words_table,fill_database_with_common_words,get_random_word,get_word_count,add_word,get_word_by_text,delete_word

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
token_bot = ''
bot = TeleBot(token_bot)


# –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
@bot.message_handler(commands=['start'])
def start(message):
    cid = message.chat.id
    bot.send_message(cid, """–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ. \n–ü—Ä–∏—á—ë–º —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. \n–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ –º–µ–Ω—é.\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è""")
    create_words_table(cid)
    fill_database_with_common_words(cid)
    userStep[cid] = 0
    ask_question(cid)

@bot.message_handler(commands=['game'])
def game(message):
    cid = message.chat.id
    create_words_table(cid)
    userStep[cid] = 0
    ask_question(cid)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å
def ask_question(user_id):
    word_data = get_random_word(user_id)
    word_id, word, translation, example = word_data

    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons = [word]
    for _ in range(3):
        random_word_data = get_random_word(user_id)
        buttons.append(random_word_data[1])
    random.shuffle(buttons)
    markup.add(*buttons)

    bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {translation}", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, check_answer, word_id, word, example, translation)


def restart_question(user_id, word_id, word, example,translation):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons = [word]
    for _ in range(3):
        random_word_data = get_random_word(user_id)
        buttons.append(random_word_data[1])
    random.shuffle(buttons)
    markup.add(*buttons)

    bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {translation}", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, check_answer, word_id, word, example,translation)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_answer(message, word_id, word, example,translation):
    user_id = message.chat.id
    user_answer = message.text.strip()
    if message.text == '/exit':
        bot.send_message(user_id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏!")
    elif user_answer.lower() == word.lower():
        bot.send_message(user_id, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
        bot.send_message(user_id, f"–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {example}")
        ask_question(user_id)
    else:
        bot.send_message(user_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        restart_question(user_id, word_id, word, example,translation)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: message.text == '/add_word')
def add_word_command(message):
    user_id = message.chat.id
    userStep[user_id] = 1
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 1)
def save_new_word(message):
    user_id = message.chat.id
    word = message.text.strip().lower()


    translation = get_word_translation(word)
    example = get_word_example(word)

    if translation and example:
        add_word(user_id, word, translation, example)
        word_count = get_word_count(user_id)
        bot.send_message(user_id, f"–°–ª–æ–≤–æ '{word}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å. "
                                  f"–¢–µ–ø–µ—Ä—å –≤—ã –∏–∑—É—á–∞–µ—Ç–µ {word_count} —Å–ª–æ–≤.")
        userStep[user_id] = 0
    else:
        bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞. "
                                  "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    userStep[user_id] = 0

@bot.message_handler(func=lambda message: message.text == '/delete_word')
def delete_word_command(message):
    user_id = message.chat.id
    userStep[user_id] = 2
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 2)
def delete_word_by_text(message):
    user_id = message.chat.id
    word = message.text.strip().lower()

    word_data = get_word_by_text(user_id, word)
    if word_data:
        word_id,user_id, word, translation,example = word_data
        delete_word(user_id, word_id)
        word_count = get_word_count(user_id)
        bot.send_message(user_id, f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è. "
                                  f"–¢–µ–ø–µ—Ä—å –≤—ã –∏–∑—É—á–∞–µ—Ç–µ {word_count} —Å–ª–æ–≤.")
    else:
        bot.send_message(user_id, f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.")
    userStep[user_id] = 0


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_step(user_id):
    if user_id in userStep:
        return userStep[user_id]
    else:
        return 0

if __name__ == '__main__':
    userStep = {}
    bot.polling(none_stop=True)